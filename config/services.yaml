# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
    # Default request context, used i.e to create url from commands
    router.request_context.host: '%env(REQUEST_BASE_HOST)%'
    router.request_context.base_url: '%env(REQUEST_BASE_PATH)%'
    asset.request_context.base_path: '%router.request_context.base_url%'

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/'
        exclude:
            - '../src/DependencyInjection/'
            - '../src/Entity/'
            - '../src/Kernel.php'
            - '../src/Tests/'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Controller\:
        resource: '../src/Controller/'
        tags: ['controller.service_arguments']

    App\Command\NotificationCommand\:
        resource: '../src/Command/NotificationCommand/'
        calls:
            - setSocieteRepository: ['@App\Repository\SocieteRepository']

    App\Service\SocieteInitializer:
        tags:
            -
                name: 'doctrine.orm.entity_listener'
                event: 'postPersist'
                entity: 'App\Entity\Societe'

    App\Command\TestSmsCommand:
        $smsDsn: '%env(SMS_DSN)%'

    Twig\Extensions\IntlExtension: ~

    App\Service\RdiMailer:
        $mailFrom: '%env(MAILER_FROM)%'

    App\Service\Timesheet\Export\TimesheetExporter:
        $exportFormats: !tagged_iterator app.timesheet_export.format

    App\Service\Timesheet\Export\Format\:
        resource: '../src/Service/Timesheet/Export/Format/'
        tags: ['app.timesheet_export.format']

    App\Service\Timesheet\Export\Format\SpreadsheetExport:
        tags: ['app.timesheet_export.format']
        arguments:
            $tmpDir: '%kernel.cache_dir%/timesheets-export-tmp'

    App\Controller\RecommanderController:
        $defaultMailFrom: '%env(MAILER_FROM)%'

    App\Activity\ActivityService:
        arguments:
            $activityTypes: !tagged_iterator { tag: 'app.activity_type', default_index_method: 'getType' }
        calls:
            - setFallbackActivityType: ['@App\Activity\FallbackActivityType']

    App\Activity\Type\:
        resource: '../src/Activity/Type/'
        tags: ['app.activity_type']

    App\Activity\Type\FaitMarquantCreatedActivity:
        tags:
            - 'app.activity_type'
            - { name: doctrine.orm.entity_listener, event: postPersist, entity: App\Entity\FaitMarquant }

    App\Activity\Type\FaitMarquantModifiedActivity:
        tags:
            - 'app.activity_type'
            - { name: doctrine.orm.entity_listener, event: postUpdate, entity: App\Entity\FaitMarquant }

    App\Activity\Type\ProjetCreatedActivity:
        tags:
            - 'app.activity_type'
            - { name: doctrine.orm.entity_listener, event: postPersist, entity: App\Entity\Projet }

    App\Activity\Type\UserQuitteSociete:
        tags:
            - 'app.activity_type'
            - { name: doctrine.orm.entity_listener, event: postUpdate, entity: App\Entity\SocieteUser }

    App\Activity\Type\AdminEjectUser:
        tags:
            - 'app.activity_type'
            - { name: doctrine.orm.entity_listener, event: postUpdate, entity: App\Entity\SocieteUser }

    App\Activity\Type\UserRejointSociete:
        tags:
            - 'app.activity_type'
            - { name: doctrine.orm.entity_listener, event: postUpdate, entity: App\Entity\SocieteUser }

    App\Service\EntityLink\EntityLinkGenerator\:
        resource: '../src/Service/EntityLink/EntityLinkGenerator/'
        tags: ['app.entity_link_generator']

    App\Service\EntityLink\EntityLinkService:
        $linkGenerators: !tagged_iterator { tag: 'app.entity_link_generator', default_index_method: 'supportsEntity' }

    Elasticsearch\Client:
        lazy: true
        factory: ['App\Service\RdiScore\ElasticSearchClientFactory', 'createClient']
        arguments:
            - '%env(ELASTIC_SEARCH_HOST)%'

    App\Service\RdiScore\ScoreUpdater:
        $projetIndex: '%env(ELASTIC_SEARCH_INDEX_PROJET)%'

    App\Onboarding\Step\:
        resource: '../src/Onboarding/Step/'
        tags: ['app.onboarding_step']

    App\Onboarding\Onboarding:
        $onboardingSteps: !tagged_iterator { tag: 'app.onboarding_step', default_priority_method: getPriority }

    App\HelpText\HelpText:
        $templatesDir: '%twig.default_path%'

    App\Slack\Slack:
        $slackClientId: '%env(SLACK_APP_CLIENT_ID)%'
        $slackClientSecret: '%env(SLACK_APP_CLIENT_SECRET)%'

    App\License\Decryption:
        arguments:
            $licensePublicKeyUrl: '%env(LICENSE_PUBLIC_KEY_URL)%'
            $licensePublicKeyFilename: '%env(resolve:LICENSE_PUBLIC_KEY_FILENAME)%'

    App\License\QuotaService:
        $licenseQuotas: !tagged_iterator app.license_quota

    App\License\Quota\:
        resource: '../src/License/Quota/'
        lazy: true
        tags:
            - { name: app.license_quota }

    App\License\Quota\ActiveProjetQuota:
        lazy: true
        tags:
            - { name: app.license_quota }
            - { name: doctrine.orm.entity_listener, event: prePersist, entity: App\Entity\Projet }
            - { name: doctrine.orm.entity_listener, event: preUpdate, entity: App\Entity\Projet }

    App\License\Quota\ContributeurQuota:
        lazy: true
        tags:
            - { name: app.license_quota }
            - { name: doctrine.orm.entity_listener, event: preUpdate, entity: App\Entity\ProjetParticipant }

    App\License\Listener\LicenseExpiredListener:
        tags:
            - { name: 'doctrine.event_subscriber' }

    App\LicenseGeneration\Listener\SocieteCreatedListener:
        tags:
            - { name: doctrine.orm.entity_listener, event: postPersist, entity: App\Entity\Societe }

    App\LicenseGeneration\Command\GenerateLicensesCommand:
        autoconfigure: false

    app.license_generation.command.generate_license.offre_starter:
        class: App\LicenseGeneration\Command\GenerateLicensesCommand
        arguments:
            $licenseFactory: '@App\License\Factory\OffreStarterLicenseFactory'
        tags:
            - { name: console.command, command: app:license-generation:generate:starter-offer }

    app.license_generation.command.generate_license.try_offer:
        class: App\LicenseGeneration\Command\GenerateLicensesCommand
        arguments:
            $licenseFactory: '@App\License\Factory\TryOfferLicenseFactory'
        tags:
            - { name: console.command, command: app:license-generation:generate:try-offer }

    app.license_generation.command.generate_license.unlimited:
        class: App\LicenseGeneration\Command\GenerateLicensesCommand
        arguments:
            $licenseFactory: '@App\License\Factory\UnlimitedLicenseFactory'
        tags:
            - { name: console.command, command: app:license-generation:generate:unlimited }

    App\LicenseGeneration\Command\GeneratePrivateKeyCommand:
        $privateKeyFile: '%env(resolve:LICENSE_GENERATION_PRIVATE_KEY)%'
        $publicKeyFile: '%env(resolve:LICENSE_GENERATION_PUBLIC_KEY)%'

    App\LicenseGeneration\Encryption:
        $privateKeyFile: '%env(resolve:LICENSE_GENERATION_PRIVATE_KEY)%'
        $publicKeyFile: '%env(resolve:LICENSE_GENERATION_PUBLIC_KEY)%'

    App\LicenseGeneration\Form\QuotaType:
        $licenseQuotas: !tagged_iterator app.license_quota

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones
